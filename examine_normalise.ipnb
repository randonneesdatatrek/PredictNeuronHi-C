{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Examiner données normalisées"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the packages we will use\n",
    "import os.path as op\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas\n",
    "import h5py\n",
    "\n",
    "import cooler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# The following directive activates inline plotting\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "filepath = \"/home/bureau/projects/def-bureau/bureau/distiller/iPSC/data/1m/seqs_cov/0.h5\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<HDF5 file \"0.h5\" (mode r)>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h5 = h5py.File(filepath, 'r')\n",
    "h5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<KeysViewHDF5 ['targets']>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h5.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<HDF5 dataset \"targets\": shape (20960, 99681), type \"<f2\">"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h5['targets']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.03952 ,  0.1498  ,  0.507   ,  0.6104  , -0.2498  , -0.1611  ,\n",
       "         0.3335  ,  0.4167  ,  0.0576  ,  0.1526  ],\n",
       "       [-0.1489  , -0.02504 ,  0.259   ,  0.3674  ,  0.3853  ,  0.4736  ,\n",
       "         0.06744 ,  0.1578  ,  0.391   ,  0.473   ],\n",
       "       [ 0.12036 ,  0.2329  ,  0.2118  ,  0.3257  ,  0.4546  ,  0.5405  ,\n",
       "        -0.2932  , -0.2076  , -0.1087  , -0.0046  ],\n",
       "       [-0.3435  , -0.2236  ,  0.128   ,  0.2573  ,  0.3975  ,  0.48    ,\n",
       "        -0.2886  , -0.218   , -0.1451  , -0.06573 ],\n",
       "       [ 0.2496  ,  0.3547  ,  0.4565  ,  0.5703  ,  0.008484,  0.1008  ,\n",
       "         0.01157 , -0.07764 ,  0.00239 ,  0.0999  ],\n",
       "       [ 0.08136 ,  0.2074  ,  0.012665,  0.1309  ,  0.1891  ,  0.284   ,\n",
       "        -0.6885  , -0.6157  , -0.5425  , -0.4531  ],\n",
       "       [-0.0202  ,  0.09717 , -0.1873  , -0.06415 ,  0.5967  ,  0.6924  ,\n",
       "         0.1698  ,  0.2563  ,  0.2048  ,  0.282   ],\n",
       "       [-0.3413  , -0.2401  ,  0.4866  ,  0.608   , -0.569   , -0.474   ,\n",
       "        -0.1578  , -0.08606 , -0.008934,  0.0706  ],\n",
       "       [ 0.2207  ,  0.3438  ,  0.5845  ,  0.7207  ,  0.0665  ,  0.1328  ,\n",
       "        -0.4055  , -0.3152  , -0.137   , -0.05936 ],\n",
       "       [ 0.03766 ,  0.1758  ,  0.3162  ,  0.417   ,  0.10944 ,  0.1946  ,\n",
       "        -0.3357  , -0.2551  , -0.1677  , -0.083   ]], dtype=float16)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h5['targets'][:10,:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(h5['targets'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
